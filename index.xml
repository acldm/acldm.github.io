<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>acldm的博客</title>
    <link>https://acldm.github.io/</link>
    <description>Recent content on acldm的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Jun 2018 23:18:53 +0800</lastBuildDate>
    
	<atom:link href="https://acldm.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C#中的泛型类</title>
      <link>https://acldm.github.io/post/c#%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sat, 23 Jun 2018 23:18:53 +0800</pubDate>
      
      <guid>https://acldm.github.io/post/c#%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B/</guid>
      <description>泛型的主要作用是创建独立于类型的类和方法。
泛型不仅仅是c#中的一种结构，还是CLR定义的，即c#中定义的泛型可以在其它.Net语言上使用。
泛型的特点(好处)  性能 不再需要装箱拆箱
 类型安全 泛型类型(一般命名为T)定义了允许使用的类型，不符合的类型不会通过编译。
 代码重用 一次编写，各类都可以通过泛型得到对应的类型的实例。
  泛型类的使用 默认值 泛型类型可以指定为值类型/引用类型，在泛型类内创建对应的泛型对象时有可能会遇到将对象的值赋值为null的情况。而null只能应用于引用类型并不能应用于值类型。
解决这个问题的方法就是使用default关键字：
T t = default(T);  default(T)对于引用类型的T返回null,对于值类型的T返回0
约束 如果要使用泛型来调用特定类型中的方法，就必须使用约束，约束是一个接在泛型声明后的where子句。以下是泛型支持的几种约束:
   约束 说明     where T: class 类约束，类型T必须是引用类型   where T: struct 结构约束,类型T必须是值类型   where T: IFoo 指定类型T必须实现接口IFoo   where T: Foo 指定类型T必须派生自基类Foo   where T: new() 构造函数约束,指定类型T必须具有一个默认构造函数   where T:Tb 泛型类型约束，类型T必须派生自泛型类型Tb    继承 泛型类型可以实现泛型接口:</description>
    </item>
    
    <item>
      <title>生成自定义分布的随机数——蒙特卡洛算法</title>
      <link>https://acldm.github.io/post/mtkl/</link>
      <pubDate>Wed, 20 Jun 2018 13:21:14 +0800</pubDate>
      
      <guid>https://acldm.github.io/post/mtkl/</guid>
      <description>日常使用的随机有很多需求是无法满足的。自定义分布就是普通随机生成算法所棘手的一个问题。
所谓自定义分布，比如说，有一个6面骰子，正常情况下，1~6这6个数字均匀分布在6个面。投掷骰子，这六个数字各有六分之一的机率正面朝上，这是最常见的状况。
现在，换一个6面骰子，与前一个骰子不一样的是现在的6面骰有3个面上是3，两个面上是2，剩余一个面上是1。现在，投掷这个骰子，这时正面朝上的数字的机率就不是均等的了。数字3正面朝上的机率是二分之一，数字2正面朝上的机率所三分之一。数字1正面朝上的机率是六分之一。想要得到这种自定义分布的随机数，普通的随机数生成器是形不通的。
对于这样的问题，正好有一个简单有效的算法来生成这样的随机数。它就是蒙特卡洛算法。这个算法生成两个随机数并使用以下步骤来生成一个自定义分布的数：
 选择一个随机数R1 计算R1被选中的资格P(假设P=R1) 生成新的随机数R2 如果R2小于P,则R1就是要找的随机数 如果R2大于P,丢弃R1回到第1步重新寻找  以下是该算法的实现:
function generatorNumber() while true do local n = math.random(100); local n2 = math.random(100); if n2 &amp;lt; n then return n; end end end  </description>
    </item>
    
    <item>
      <title>Perlin噪音算法初次接触</title>
      <link>https://acldm.github.io/post/perlin/</link>
      <pubDate>Wed, 20 Jun 2018 13:20:20 +0800</pubDate>
      
      <guid>https://acldm.github.io/post/perlin/</guid>
      <description>一个标准的随机数生成器能够产生互不关联的随机数。但是一般的随机性并不符合自然界的特征。
Perlin噪音算法就是用于生成符合自然排序的伪随机数序列。这样的算法生成的值与其相邻的值是有一定关联的。比如现实中的地形，虽然高低随机但起伏一般是连续的。没有断崖时的差距。
在Processing中内置了Perlin噪音算法的实现:noise()函数。noise()函数可以有1~3个参数，分别代表1维，2维，3维。
一维噪声 我们先来使用一维的Perlin噪音与随机数生成器各生成一张趋势图来相互比较一下:
//使用随机数生成器生成的趋势图 void setup() { size(480, 240); float prevx = 0; float prevy = 0; float x = 1; for (int i=0; i&amp;lt;width; i++) { float y = random(0, (float)height); line(prevx, prevy, x, y); prevx = x; prevy = y; x++; } }  //使用Perlin算法生成的趋势图 void setup() { size(480, 240); float prevx = 0; float prevy = 0; float x = 1; float t = 1; for (int i=0; i&amp;lt;width; i++) { float y = map(noise(t), 0, 1, 0, height); line(prevx, prevy, x, y); prevx = x; prevy = y; x++; t+=0.</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://acldm.github.io/about/</link>
      <pubDate>Wed, 20 Jun 2018 13:16:16 +0800</pubDate>
      
      <guid>https://acldm.github.io/about/</guid>
      <description>计算机专业本科在读生
努力的游戏程序员
历史爱好者</description>
    </item>
    
  </channel>
</rss>